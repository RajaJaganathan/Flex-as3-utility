/*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package maja.air{	import flash.filesystem.*;		/**	 * LogApp Class	 * @copy 2010 http://www.fmajakovskij.info	 * @author Majakovskij	 * @see http://www.fmajakovskij.info	 * @langversion ActionScript 3.0	 * @playerversion Air 1.5+	 * 	 * @example	 * <listing version="3.0">	 *      // you can log from any of your classes since it is a static class	 *      import maja.LogApp	 * 		LogApp.log("some message", some other data", ... )	 * </listing>     * 	 * <p>	 * The los files will be placed in the 'logs' folder created in the Application Storage Directory.	 * </p>	 *	 *	 * <code>Source code licensed under a Creative Commons Attribution-Share Alike 3.0 License.	 * http://creativecommons.org/licenses/by-sa/3.0/	 * Some Rights Reserved.</code>	 */	public class LogApp	{				private var logStream:FileStream		private static var thisRef:LogApp		private static var inited:Boolean = false				public function LogApp()		{			if(inited)			{				trace("You cannot instantiate this Singleton Static class.")				trace("Use LogApp.log() from any of your class.")				return			}						var logFolder:File = File.applicationStorageDirectory.resolvePath("logs")			if(!logFolder.exists) logFolder.createDirectory()						var date:Date = new Date()			var session:String = date.getTime().toString()			var logFile:File = logFolder.resolvePath(session + ".log")						logStream = new FileStream();			logStream.open(logFile, FileMode.APPEND)						inited = true			if(!thisRef) thisRef = this		}				/**		 * Usage: LogApp.log("some text", "some message", ... ) 		 * @param args		 * 		 */				public static function log( ...args ):void		{			if(!thisRef) thisRef = new LogApp()						if(thisRef.logStream) 			{				var lg:String = "";				var now:Date = new Date()				var time:String = now.getTime().toString() + ";" + now.toString();				for(var i:int=0; i<args.length; i++)				{					lg += String(args[i]) +";";				}				thisRef.logStream.writeUTFBytes( time + lg + "\n" );			}					}			}}